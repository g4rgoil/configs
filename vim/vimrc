""         _
""  __   _(_)_ __ ___  _ __ ___
""  \ \ / / | '_ ` _ \| '__/ __|
""   \ V /| | | | | | | | | (__
""    \_/ |_|_| |_| |_|_|  \___|
""


set nocompatible
set encoding=utf-8
set backupext=.bak
let mapleader=','

" Add ~/.vim to runtimepath and packpath
if has('nvim')
    set runtimepath+=~/.vim/after runtimepath+=~/.vim
    set packpath+=~/.vim/after packpath+=~/.vim
endif

""" Filetyp turned back on after vundle did its thing
filetype off

"" Plugins
set runtimepath+=~/.vim/bundle/Vundle.vim

if filereadable(expand("~/.vim/bundle/Vundle.vim/autoload/vundle.vim"))
    silent! call vundle#rc()
        Plugin 'VundleVim/Vundle.vim'

        Plugin 'tpope/vim-commentary'
        Plugin 'tpope/vim-surround'
        Plugin 'tpope/vim-fugitive'

        Plugin 'vim-airline/vim-airline'
        Plugin 'vim-airline/vim-airline-themes'
        Plugin 'morhetz/gruvbox'
        Plugin 'junegunn/goyo.vim'

        Plugin 'SirVer/ultisnips'
        Plugin 'honza/vim-snippets'
        Plugin 'pgilad/vim-skeletons'
        Plugin 'davidhalter/jedi-vim'

        Plugin 'scrooloose/nerdtree'
        Plugin 'ap/vim-css-color'
        Plugin 'lervag/vimtex'
        Plugin 'aklt/plantuml-syntax'
        Plugin 'petrbroz/vim-glsl'

        Plugin 'vim-syntastic/syntastic'
        Plugin 'tmhedberg/SimpylFold'
        Plugin 'Konfekt/FastFold'

        Plugin 'Valloric/YouCompleteMe'
        Plugin 'rdnetto/YCM-Generator'
        Plugin 'freitass/todo.txt-vim'
        Plugin 'Raimondi/delimitMate'
endif

if has('autocmd')
    filetype plugin indent on

    "" Delete all trailing white spaces on save
    autocmd BufWritePre * %s/\s\+$//e
    autocmd BufWritePost ~/.vimrc,*vimrc source ~/.vimrc
endif

"" General
set ruler number list
set lcs=tab:>-,trail:-,extends:>,precedes:<,eol:Â¬
set linebreak
set showbreak=+++
set textwidth=120
set wrap showmatch
set wildmode=longest,list,full
set cmdheight=1
set textwidth=0
set backspace=indent,eol,start
set smarttab
set tabstop=4
set shiftwidth=4
set expandtab autoindent
set splitbelow splitright
set foldmethod=manual
set mouse=n

syntax enable

"" Setting the cursor shape for vim and neovim
if has('nvim')
    if exists("$TMUX")
        set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
    endif
else
    if exists("$TMUX")
        let &t_SI = "\ePtmux;\e\e[5 q\e\\"
        let &t_EI = "\ePtmux;\e\e[2 q\e\\"
    else
        let &t_SI = "\e[5 q"
        let &t_EI = "\e[2 q"
    endif
endif

""" Setting support for True color
if has("termguicolors")
    set termguicolors
endif

let g:gruvbox_contrast_dark = 'hard'

if has('nvim')
    colorscheme gruvbox
else
    colorscheme slate
endif

"" Define key mappings for tabs and splits
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
nnoremap <C-h> <C-w><C-h>
map <C-n> :tabp<CR>
map <C-m> :tabn<CR>

map <leader>sp :split<CR>
map <leader>vs :vsplit<CR>
map <leader>c :tabnew<CR>

nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-s> :%s//g<Left><Left>

map <leader>w :w<CR>
map <leader>q :q<CR>
map <leader>n :next<CR>
map <leader>p :previous<CR>

let g:vimtex_compiler_progname ='nvr'

"" Airline Configuration
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme = 'luna'
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#vimtex#enabled = 1

"" Vimtex Configuration
let g:vimtex_compiler_method = 'latexmk'
let g:vimtex_complete_close_braces = 1
let g:vimtex_fold_enabled = 0
let g:vimtex_fold_comments = 1
let g:vimtex_view_general_viewer = 'evince'
let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
let g:vimtex_view_general_options_latexmk = '--unique'

"" Skeleton configuration
let skeletons#autoRegister= 1
let skeletons#skeletonsDir=['~/.vim/skeletons','/etc/vim/skeletons']

"" ultisnips configuration
let g:UltiSnipsExpandTrigger='<C-J>'
let g:UltiSnipsJumpForwardTrigger='<C-L>'
let g:UltiSnipsJumpBackwardTrigger='<C-H>'

" let g:UltiSnipsSnippetsDir='~/.vim/snippets/UltiSnips'
let g:UltiSnipsSnippetDirectories=["UltiSnips"]

"" ycm (you complete me) configuration
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
let g:ycm_python_binary_path = '/usr/bin/python3'
let g:syntastic_sh_shellcheck_args = "-x"

"" File Type options
let g:markdown_fenced_languages = ['javascript', 'go', 'php']

let vim_markdown_preview_github = 1

